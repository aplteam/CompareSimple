:Class CompareSimple
⍝ ## Overview
⍝ ### Comparing
⍝ `CompareSimple` offers a bunch of shared methods helpful to compare functions, operators and scripts.
⍝ Sources of those objects may by in the current workspace or on file (SALT/script files).\\
⍝ ### Comparing
⍝ The actual comparison will be done by the user command ]CompareFiles if it is available.
⍝ If it is not then the filenames are printed to the session, leaving it to the user to do the comparison.
⍝ ## Features
⍝ `CompareSimple` offers just methods to...
⍝ * compare an APL object with a file.
⍝ * compare two files.
⍝ ## Compare versus CompareSimple
⍝ `Compare` is a superset of `CompareSimple`.
⍝ Compare offers more features but is also bigger and more complicated.
⍝ If `CompareSimple` suits your needs, take it.
⍝ If not then have a look at `Compare`.\\
⍝ Author: Kai Jaeger
⍝ Homepage: <https://github.com/aplteam/CompareSimple>

    ⎕IO←1 ⋄ ⎕ML←1

    ∇ r←Version
      :Access Public shared
      r←'CompareSimple' '6.0.0+35' '2022-09-19'
    ∇

    ∇ History
      :Access Public shared
      ⍝ * 6.0.0
      ⍝   * BREAKING CHANGE:
      ⍝     Does not run any comparison itself anymore but relies on the presence of ⎕SE.CompareFiles or,
      ⍝     if not available, just returns the filenames rather than change flags.
      ⍝   * BREAKING CHANGE:
      ⍝     SALT is not supported anymore.
      ⍝   * Now informs Link about any changes
      ⍝ * 5.0.1
      ⍝   * Package config corrected
      ⍝ * 5.0.0
      ⍝   * BREAKING CHANGES:
      ⍝     * `refToUtils` removed. All dependencies are now expected to be siblings of the class.
      ⍝     * `SetChanged` now returns 1 in case acre was interested and 0 otherwise.
      ⍝   * Internal changes:
      ⍝     * Does not handle ANSI files anymore
      ⍝     * Couple of private functions deleted that are not used any longer
      ⍝\\
      ⍝ For information regarding older versions see <https://github.com/aplteam/CompareSimple/releases>
    ∇

    :Field Public Shared regPath←'HKEY_CURRENT_USER\Software\APLTree\Compare\'
    _NoComparison←0

    :Property NoComparison
    :Access Public Shared
    ⍝ Useful for tests because there we don't need actual comparisons most of the time
        ∇ r←get
          r←_NoComparison
        ∇
        ∇ set arg
          _NoComparison←arg.NewValue
        ∇
    :EndProperty

    ∇ filename←WriteAplObjToFile aplObjName;errMsg;body
      :Access Public Shared
    ⍝ `aplObjName` is written to a temp file. `aplObjName` may be one of:
    ⍝ * Function name (trad or direct).
    ⍝ * Operator name (trad or direct).
    ⍝ * Script (class, interface, namespace) by name or by reference.
      aplObjName←⍕aplObjName ⍝ just in case it is a ref
      errMsg←'Right argument seems not to be one of: APL fns/opr/class/interface/scripted namespace'
      errMsg ⎕SIGNAL 11/⍨~((2=⎕NC'body')∧0=⎕NC aplObjName)∨(⎕NC⊂aplObjName)∊3.1 3.2 3.3 4.1 4.2 9.4 9.5 9.1
      errMsg ⎕SIGNAL 11/⍨~3 4 9∊⍨⎕NC⍕aplObjName
      body←{9=⎕NC ⍵:⎕SRC⍎⍵ ⋄ ⎕NR ⍵}aplObjName
      filename←WriteToFile⍕¨body  ⍝ The "⍕" is needed for idioms/assigned fns/opr
    ∇

    ∇ filename←WriteToFile text;errMsg
      :Access Public Shared
    ⍝ `text` is written to a temp file.
    ⍝
    ⍝ The name of the temp file is returned as the result and is build
    ⍝ up from the current time, the current user and the extension ".txt".
    ⍝ It's situated in the Windows temp dir.
    ⍝
    ⍝ Use this to write APL code to a file.
      filename←##.FilesAndDirs.GetTempPath,(' '~⍨⍕⎕TS),(⍕?1000),'_',⎕AN,'.dyalog'
      (⊂text)##.FilesAndDirs.NPUT filename 1
    ∇

    ∇ r←CreateParmsFor_These
      :Access Public Shared
      ⍝ Create a command space with the default settings of "These"
      r←⎕NS''
      r.readOnly1←0
      r.readOnly2←0
      r.alias1←''
      r.alias2←''
      r.reportFile←''
      r.⎕FX'r←List;⎕IO' '⎕IO←⎕ML←0' 'r←{(⍵,[.5]⎕nc¨⊂¨⍵),⍎¨⍵}(⊂''List'')~⍨⎕NL-2 9 3' ⍝ Vars, refs and niladic functions
    ∇

    ∇ {r}←{parms}These y;ref1;ref2;b;l;ref1IsRef;ref2IsRef;ref2Is_FN;ref1Is_FN;temp_FN1;FN_1;fno1;name;exe;orig;isLinked1;isLinked2;buff
      ;range1;dates1;temp_FN2;FN_2;fno2;range2;dates2;file2;body;bodies;lineNo;res;rc;G;cmd;f;file1;buffer;changeFlag
      :Access Public Shared
          ⍝ Compare two "things" with each other.
          ⍝
          ⍝ * Syntax I.: `(ref1 [ref2])←y`
          ⍝ * Syntax II.: `(name1 [name2])←y`
          ⍝ * Syntax III.: `(name ["file://",filename])←y`
          ⍝ * Syntax IV.: Just one name or one ref (`[2]` is then either a LINKed file or an acre-managed object)
          ⍝
          ⍝ Note that any references must point to scripts. `These` cannot deal with
          ⍝ ordinary namespaces (refs or names, it doesn't matter); see `Compare.Merge`
          ⍝ for this.
          ⍝
          ⍝ ## Compares y[1] with y[2].
          ⍝
          ⍝ If `y[2]` is omitted, `y[1]` is compared with the file the object is saved in (Link!).
          ⍝
          ⍝ `y[1]` as well as `y[2]` can be any of:
          ⍝
          ⍝ * Reference to a script in the workspace.
          ⍝ * Name of a function, operator or script in the workspace.
          ⍝ * Name of a script file (\*.dyalog).
          ⍝
          ⍝ The left argument can be a command space with all sorts of parameters.
          ⍝
          ⍝ By default, any changes made in a comparison tooare taken into account.
          ⍝
          ⍝ The following parameters can by specified from outside by passing a command space
          ⍝ as a left argument:
          ⍝
          ⍝ `readOnly1`, `readOnly2`, `alias1`, `alias2`, `reportChanges`
          ⍝
          ⍝ Example:
          ⍝ ~~~
          ⍝ parms←⎕ns ''
          ⍝ parms.readOnly1←0
          ⍝ parms.alias1←'foo'
          ⍝ parms.alias2←'blah
          ⍝
          ⍝ parms #.Compare.These #.Compare
          ⍝ ~~~
          ⍝
          ⍝ ## Explict Result
          ⍝ If the user command ]CompareFiles and its API are not available the names of the two files
          ⍝ created by CompareSimple are returned.
          ⍝ If it is available two change flags are returned.
          ⍝ If `y[1]` and/or `y[2]` are **not** read-only, any changes made by  the user
          ⍝ are automatically taken into account, meaning that either the object in the
          ⍝ workspace or the underlying file is updated by `These`. Now under some
          ⍝ circumstances the caller might want to be notified about such changes, for
          ⍝ examples if she has created the file itself. This is what the explicit result
          ⍝ is reporting back: If nothing at all has changed, it's (0 0), if both got
          ⍝ changed, it is (1 1).
     
      :If 1=≡y
      :AndIf 2=+/⊃∨/' ⎕SE.' ' #.'⍷¨⊂' ',⍕y
          (ref1 ref2)←y
      :Else
          y←,{0 1∊⍨≡⍵:⊂⍵ ⋄ y}y
          (ref1 ref2)←2↑y,⊂''
      :EndIf
      G←CreateParmsFor_These
      :If 9=⎕NC'parms'
      :AndIf 0≠≢l←parms.⎕NL-2
          :If ∨/b←~l∊G.⎕NL-2
              11 ⎕SIGNAL⍨'Invalid left argument: ',{1↓∊','∘,¨⍵}b/l
          :EndIf
          'G'⎕NS(⊂'parms.'),¨parms.⎕NL-2
      :EndIf
      changeFlag←0 0
     
      (ref1 ref2)←{IsRef ⍵:⍵ ⋄ 9.5 9.4∊⍨|⎕NC⊂⍵:⍎⍵ ⋄ {⍵/⍨~(∧\' '=⍵)∨⌽∧\' '=⌽⍵}⍵}¨ref1 ref2
      (ref1 ref2)←{⍬≡⍴⍵:⍵
          (1⍴⍵)∊'#⎕':⍵
          (':'∊⍵):⍵
          ('\\'≡(2⌊⍴,⍵)↑⍵):⍵
          0=≢⍵:⍵
          (2⊃⎕NSI),'.',⍵}¨ref1 ref2
      f←9 9=⊃∘⎕NC¨⍕¨ref1 ref2                   ⍝ If they are both name class 9 but...
      f∧←IsNotScript¨ref1 ref2                  ⍝ ... not a script then they are ordinary namespaces...
     
      :If ∨/f
          :If ∧/f
              11 ⎕SIGNAL⍨'"These" cannot process ordinary namespaces; use `Compare.Merge` instead.'
          :Else
              11 ⎕SIGNAL⍨'"These" cannot process any ordinary namespace: ',(⍕⊃f/ref1 ref2),'; use `Compare.Merge` instead.'
          :EndIf
      :Else
          :If 0=≢⍕ref2 ⍝ Special case: only y[1] was specified, so let's look for
              :If 0=f[1] ⍝ Is it a script?
                  :If 0<≢buff←⎕SE.Link.GetFileName⍕ref1
                      ref2←'file://',buff
                      readOnly2←1 ⍝ only this makes sense!
                  :Else
                      11 ⎕SIGNAL⍨'Nothing to compare with: "',(⍕ref1),'"'
                  :EndIf
              :Else
                  'Invalid right argument'⎕SIGNAL 11
              :EndIf
          :EndIf
     
          (ref1IsRef ref2IsRef)←IsRef¨ref1 ref2
          (ref1 ref2)←ref1IsRef ref2IsRef{⍺:GetRealHome ⍵ ⋄ ⍵}¨ref1 ref2
          (ref1Is_FN ref2Is_FN)←IsFile¨ref1 ref2
          temp_FN1←temp_FN2←⍬                                           ⍝ Temp filenames
          isLinked1←0<≢⎕SE.Link.GetFileName ref1
          isLinked2←0<≢⎕SE.Link.GetFileName ref2
     
          :If ref1Is_FN
              FN_1←('file://'){⍵↓⍨(≢⍺)×⍺≡(≢⍺)↑⎕C ⍵}ref1
          :Else
              :If 0=≢temp_FN1 ⍝ then we are coming back again
                  temp_FN1←WriteAplObjToFile ref1
                  FN_1←''
              :EndIf
          :EndIf
          :If ref2Is_FN
              FN_2←('file://'){⍵↓⍨(≢⍺)×⍺≡(≢⍺)↑⎕C ⍵}ref2
          :Else
              FN_2←WriteAplObjToFile ref2
              temp_FN2←''
          :EndIf
          file1←(1+0=≢temp_FN1)⊃temp_FN1 FN_1
          file2←(1+0=≢temp_FN2)⊃temp_FN2 FN_2
          G.alias1{0=≢⍺:⍵ ⋄ ⍺}←ref1
          G.alias2{0=≢⍺:⍵ ⋄ ⍺}←ref2
     
          ('File not found: ',file1)⎕SIGNAL 11/⍨~##.FilesAndDirs.Exists file1
          ('File not found: ',file2)⎕SIGNAL 11/⍨~##.FilesAndDirs.Exists file2
          :If NoComparison
              r←file1 file2
          :Else
              :If 0=⎕SE.⎕NC'CompareFiles'
                  (exe name)←⎕SE.CompareFiles.EstablishCompareEXE''
              :OrIf 3≠⎕NC'⎕se.CompareFiles.ComparisonTools.CreateParmsFor',name
                  ⎕←file1 file2
              :Else
                  parms←⍎'⎕se.CompareFiles.ComparisonTools.CreateParmsFor',name
                  parms.(file1 file2)←file1 file2
                  parms.(caption1 caption2)←⊂''
                  parms.use←exe
                  parms.(edit1 edit2)←1
                  orig←{⊃⎕NGET ⍵ 1}¨file1 file2
                  {}⎕SE.CompareFiles.Compare parms
                  bodies←{⊃⎕NGET ⍵ 1}¨file1 file2
                  changeFlag←orig≢¨bodies
                  :If ∨/changeFlag
                      :If 1⊃changeFlag
                          body←1⊃bodies
                          :If ref1Is_FN
                              (⊂body)⎕NPUT FN_1 1
                          :Else
                              :If (|⎕NC ref1)∊3 4
                                  lineNo←body{⍵.⎕FX ⍺}⍎{⍵↓⍨-'.'⍳⍨⌽⍵}ref1
                                  ⍎(' '≠1↑0⍴lineNo)/'. ⍝ ⎕FX has failed, check "lineNo"'
                                  SetChanged ref1
                              :Else
                                  :Trap 0
                                      res←body{⍵.⎕FIX ⍺}⍎{⍵↓⍨-'.'⍳⍨⌽⍵}ref1
                                      :If (⍕res)≢ref1
                                          . ⍝ Something is not quite right!
                                      :EndIf
                                      SetChanged ref1
                                  :Else
                                      ShowMsg'Fixing your changes failed, please check'
                                      →∆EditAgain
                                  :EndTrap
                              :EndIf
                          :EndIf
                      :EndIf
                      :If 2⊃changeFlag
                          body←2⊃bodies
                          :If ref2Is_FN
                              (⊂body)##.FilesAndDirs.NPUT FN_2 1
                          :Else
                              :If (|⎕NC ref2)∊3 4
                                  lineNo←body{⍵.⎕FX ⍺}⍎{⍵↓⍨-'.'⍳⍨⌽⍵}ref2
                                  ⍎(' '≠1↑0⍴lineNo)/'. ⍝ ⎕FX has failed, check "lineNo"'
                                  SetChanged ref2
                              :Else
                                  res←body{⍵.⎕FIX ⍺}⍎{⍵↓⍨-'.'⍳⍨⌽⍵}ref2
                                  :If (⍕res)≢ref2
                                      . ⍝ Something is not quite right!
                                  :EndIf
                                  SetChanged ref2
                              :EndIf
                          :EndIf
                      :EndIf
                  :EndIf
              :EndIf
              r←changeFlag
          :EndIf
          :If ∧/r∊0 1
              {0=≢⍵:shy←0 ⋄ ##.FilesAndDirs.DeleteFile ⍵}¨temp_FN1 temp_FN2
          :EndIf
      :EndIf
    ∇

    ∇ bool←{x}Match y;body_x;fileNo;body_y;SaltNS
      :Access Public Shared
      ⍝ `x` and `y` might be:
      ⍝ * a name of a fns/opr or a script, either from a namespace or a class.
      ⍝ * a reference to a script.
      ⍝ * a native file holding either a class or a namespace script.\\
      ⍝ `bool ←→ 1` if `x` and `y` are equal. Note that before actually comparing the two
      ⍝ of them, all leading and all trailing blanks are removed from the code.\\
      ⍝ Note that filenames **must** start with `file://` if they do not contain
      ⍝ one of these: `\` & `/` & `:`.\\
      ⍝ Note that the left argument is optional. However, you can omit the left
      ⍝ argument only when you specify a reference to a script as right argument.\\
      ⍝ If it's omitted, the vars SALT_Data.SourceFilename is taken.
      :If 0=|⎕NC'x'
          'Right argument is not a reference'⎕SIGNAL 11/⍨⍬≢⍴y
          'Right argument must be a ref to a class or an interface or a scripted namespace'⎕SIGNAL 11/⍨~(|⎕NC⊂⍕y)∊9.1 9.4 9.5
          ('Could not find "(∆|Salt_Data).SourceFile" in ',⍕y)⎕SIGNAL 11/⍨~2∊(|y.⎕NC'∆.SourceFile'),(|y.⎕NC'SALT_Data.SourceFile')
          SaltNS←⍎((⊃∘|y.⎕NC¨'∆' 'SALT_Data')⍳9)⊃'y.∆' 'y.SALT_Data'
          ('"SourceFile" in ',(⍕SaltNS),' is empty')⎕SIGNAL 11/⍨0=≢x←'file://',SaltNS.SourceFile
      :EndIf
      :If 'file://'{⍺≡(⍴⍺)↑⍵}⎕C⍕x
      :OrIf ∨/':/\'∊⍕x ⍝ these chars cannot be part of an APL name, so they indicate a file
          x←'file://'{⍵↓⍨(⍴⍺)×⍺≡(⍴,⍺)↑⍵}⍕x
          body_x←⊃##.FilesAndDirs.NGET x 1
          body_x←RemoveLeadingAndTrailingBlanks body_x
      :Else
          body_x←⍬
          :Trap 0
              :If (|⎕NC⊂⍕x)∊9.1 9.4 9.5
                  body_x←RemoveLeadingAndTrailingBlanks ⎕SRC⍎⍕x
              :EndIf
          :EndTrap
          :If ⍬≡body_x
              body_x←RemoveLeadingAndTrailingBlanks ⎕NR x ⍝ fns/opr?!
          :EndIf
      :EndIf
      :If 'file://'{⍺≡(⍴⍺)↑⍵}⎕C⍕y
      :OrIf ∨/':/\'∊⍕y ⍝ these chars cannot be part of an APL name, so they indicate a file
          x←'file://'{⍵↓⍨(⍴⍺)×⍺≡(⍴,⍺)↑⍵}⍕x
          body_y←⊃##.FilesAndDirs.NGET y 1
          body_y←RemoveLeadingAndTrailingBlanks body_y
      :Else
          body_y←⍬
          :Trap 0
              :If (|⎕NC⊂⍕y)∊9.1 9.4 9.5
                  body_y←RemoveLeadingAndTrailingBlanks ⎕SRC⍎⍕y
              :EndIf
          :EndTrap
          :If ⍬≡body_y
              body_y←RemoveLeadingAndTrailingBlanks ⎕NR y ⍝ fns/opr?!
          :EndIf
      :EndIf
      bool←body_x≡body_y
    ∇

    ∇ r←Exec statement
      :Access Public Shared
    ⍝ Useful to test non-public functions
      r←⍎statement
    ∇

 ⍝⍝⍝⍝⍝ Private stuff

    ∇ r←FormatTS ts
      r←{
          0=≢⍵:''
          0=+/⍵:''
          ,'ZI4,<->,ZI2,<->,ZI2,< >,ZI2,<:>,ZI2,<:>,ZI2'⎕FMT,[0.5]6↑⍵
      }ts
    ∇

    ∇ flag←{caption}YesOrNo question;∆;ms
      caption←{0<|⎕NC ⍵:'Compare: ',⍎⍵ ⋄ 'Compare'}'caption'
      ∆←⊂'MsgBox'
      ∆,←⊂caption
      ∆,←⊂'Text'question
      ∆,←⊂'Style' 'Query'
      ∆,←⊂'Event'('MsgBtn1' 'MsgBtn2')1
      'ms'⎕WC ∆
      flag←'MsgBtn1'≡2⊃⎕DQ'ms'
    ∇

    ∇ {r}←{caption}ShowMsg question;∆;ms
      r←⍬
      caption←{0<|⎕NC ⍵:'Compare: ',⍎⍵ ⋄ 'Compare'}'caption'
      ∆←⊂'MsgBox'
      ∆,←⊂caption
      ∆,←⊂'Text'question
      ∆,←⊂'Style' 'Info'
      ∆,←⊂'Event'('MsgBtn1')1
      'ms'⎕WC ∆
      {}⎕DQ'ms'
    ∇

      IsNotScript←{
⍝ Takes a name (⍵) and returns a 1 in case it's not a script, otherwise 0
⍝ The check is performed in ⍺ (ref to a namespace)
          ⍺←#
          (0=≢,⍵):1
          (9≠|⍺.⎕NC⍕⍵):1
          0::1
          ¯1≡⍺:⎕SIGNAL 11
          {0}⍺.⎕SRC ⍺.⍎⍕⍵
      }

    IsRef←{(0=≡⍵)∧⍵≢⍕⍵}                             ⍝ Used to identify references
    IsFile←{(∨/':/\'∊⍵)∨'file://'{⍺≡(⍴⍺)↑⍵}⍵}       ⍝ Used to identify filename
    ∇ r←RemoveLeadingAndTrailingBlanks r
      :If 0 1∊⍨≡r
          r/⍨←~(∧\' '=r)∧⌽∧\' '=⌽r
      :Else
          r←{⍵/⍨~(∧\' '=⍵)∨⌽∧\' '=⌽⍵}¨r
      :EndIf
    ∇

      GetRealHome←{
          ⍵{(⍺.⎕DF ⍵)⊢⍕⍺}⍵.⎕DF ⎕NULL
    ⍝ format ref - sans ⎕DF
    ⍝ ⍵ ns-ref
    ⍝ ← format of ns-ref - full path name
    ⍝   ignoring ⎕DF by using it twice!
    ⍝ Phil Last ⍝ 2008-03-13 23:14
      }

    ∇ r←ReadFile filename;qdmx
  ⍝ Reads filename, no matter whether it's a UTF-8 file or a UTF16LE file.
  ⍝ Returns `''` in case the file does not eixst.
      r←''
      :If ##.FilesAndDirs.Exists filename
          :Trap 11
              r←⊃##.FilesAndDirs.NGET filename 1
          :Else
              :Trap 11 92
                  r←↑'UTF16LE'##.FilesAndDirs.NGET filename 1
              :Else
                  qdmx←⎕DMX
                  qdmx.EM ⎕SIGNAL qdmx.EN
              :EndTrap
          :EndTrap
      :EndIf
    ∇

    ∇ {r}←SetChanged name;result;buff
    ⍝ Tells Link (and acre) that `name` got changed. Returns 1 in case Link/acre was interested and 0 otherwise.
      r←0
      :If r←0<⎕SE.⎕NC'acre'
      :AndIf 0<≢⎕SE.acre.Projects''
          result←⎕SE.UCMD'acre.SetChanged ',name
          :If 0<≢result
              r←1
          :EndIf
      :EndIf
      :If 9=⎕SE.⎕NC'Link'
          buff←⎕SE.Link.Add name
          :If 0<+/'Not found:' 'Not in a linked namespace:'{⍺≡(≢⍺)↑⍵}¨⊂buff
              r←1
          :EndIf
      :EndIf
    ∇

:EndClass
