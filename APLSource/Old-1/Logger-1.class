:Class Logger
⍝ <h2>Overview
⍝ This class is designed to write log files as ordinary ASCII (default) or UTF8 files.
⍝ Note that for ASCII files, with the Unicode version of Dyalog all non-ASCII _
⍝ characters are replaced by "¿", while the Classic version accept all chars in _
⍝ the original (unchanged) version of ⎕AV Dyalog is coming with.
⍝ With the classic version of Dyalog you cannot write Unicode files, so any _
⍝ setting is ignored then, and you will always write ASCII files.
⍝ You must specify weather the log file is active or not when an instance _
⍝ of the "Logger" class is created, but you might specify up to 4 other parameters.
⍝ Some of these parameters can be changed later on as well.
⍝ <h2> Syntax
⍝ <pre>⎕NEW Logger ([path filenameType debug timestamp])</pre>
⍝ <pre>⎕NEW Logger </pre>
⍝ <pre>⎕NEW Logger (,⊂commandSpace)</pre>
⍝ <pre>⎕NEW Logger </pre>
⍝ Only by creating a command space can one set <b>all</b> possible parameters.
⍝ Example:
⍝ <pre>
⍝ myParms←#.Logger.CreatePropertySpace
⍝ myParms.filenamePrefix←'MYAPP'
⍝ ⍝ ....
⍝ ⎕NEW Logger (,⊂myParms)
⍝ </pre>
⍝
⍝ <h2>Important defaults
⍝ By default a file "{yyyymmdd}.log" is created within "path" or opened if it already _
⍝ exists. When a new day comes along, that file is closed and a new one is created. _
⍝ (Can be switched off by setting "autoReOpen" to 0).
⍝ <h2>Error Trapping
⍝ By default almost all possible errors are trapped: a logging mechanism cannot _
⍝ be allowed to break an application which it should support. One exception: when _
⍝ creating an instance of Logger fails, that causes a crash.
⍝ However, by setting "debug" and/or "printToSession" and/or "timestamp" the "Logging" _
⍝ class can be debugged.
⍝ <h2>Preconditions
⍝ "Logger" needs the scripts APLTeamUtils and WinFile. While APLTeamUtils <b>must</b> _
⍝ be situated in the same namspace as Logger (because it is :Inluded), WinFile is _
⍝ expected to be found either in the same namespace as the Logger script or in # _
⍝ or in the namespace Logger got instanciated from.
⍝ However, if this is not appropriate, one can specify a reference "refToUtils" _
⍝ pointing to the correct namespace.
⍝ <h2>Misc
⍝ Needs: Dyalog Version 12, Unicode or Classic
⍝ Author: Kai Jaeger ⋄ APL Team Ltd ⋄ http://aplteam.com
⍝ Homepage: http://aplwiki.com/Logger

    :Include APLTeamUtils

    ⎕IO←1
    ⎕ML←3
    CrLf←⎕TC[2 3]

    ∇ r←Version
      :Access Public shared
      r←(⍕⎕THIS)'1.4.0' '2009-08-09'
    ∇

    ∇ r←History
      :Access Public Shared
    ⍝ Gives information about what has changed in this version
      r←''
      r,←⊂'Documentation improved'
      r←⎕FMT,[1.5]r
    ∇

⍝ --------------- Properties and Fields

    :Field Private ReadOnly  constructorIsRunning←0

    :Property encoding
    ⍝ Can be either 'ASCII'/'ANSI' or 'UTF8'
    :Access Public
        ∇ r←get
          r←_encoding
        ∇
    :EndProperty

    :Property autoReOpen
    ⍝ Boolean. Defaults to 1, meaning that an instance of "Logger" re-opens its log file _
    ⍝ itself when this is appropriate. For example, if "filenameType" is "year", the file _
    ⍝ re-opens with a new name  as soon as a new year comes along.
    :Access Public Instance
        ∇ r←get
          r←_autoReOpen
        ∇
        ∇ set arg
          :If ~arg.NewValue∊0 1
              :If _debug
                  'Must be a Boolean'⎕SIGNAL 11/⍨
              :Else
                  _errorCounter←1
                  :Return
              :EndIf
          :Else
              _autoReOpen←arg.NewValue
          :EndIf
        ∇
    :EndProperty

    :Property filenameType
    ⍝ Might be one of: "DATE" (the default) or "YEAR" or "MONTH".
    ⍝ The name of the logfile is accordingly "yyyymmdd" or "yyyy" of "yyyymm"
    :Access Public Instance
        ∇ r←get
          r←_filenameType
        ∇
        ∇ set arg;buffer
          buffer←Uppercase arg.NewValue
          'Invalid filenameType'⎕SIGNAL 11/⍨~(⊂buffer)∊'DATE' 'YEAR' 'MONTH' ''
          _filenameType←arg.NewValue
        ∇
    :EndProperty

    :Property debug
    ⍝ Since logging information to a file for analyzing purposes should never break an application, _
    ⍝ error trapping is used heavily within "Logger". However, this is not appropriate for debugging _
    ⍝ #.Logging. Therefore,setting debug to 1 switches error trapping off completely.
    :Access Public Instance
        ∇ r←get
          r←_debug
        ∇
        ∇ set arg
          'Must be a Boolean'⎕SIGNAL 11/⍨~arg.NewValue∊0 1
          _debug←arg.NewValue
        ∇
    :EndProperty

    :Property printToSession
    ⍝ Setting this to 1 let an instance print every entry not only to the underlying file but also _
    ⍝ to the session. Appropriate when debugging an application. Is ignored if "debug" is 0!
    ⍝ Defaults to 0, of course.
    :Access Public Instance
        ∇ r←get
          r←_printToSession
        ∇
        ∇ set arg
          'Must be a Boolean'⎕SIGNAL 11/⍨~arg.NewValue∊0 1
          _printToSession←arg.NewValue
        ∇
    :EndProperty

    :Property extension
    ⍝ This defines the file extension of the log file to be created. Defaults to "log"
    :Access Public Instance
        ∇ r←get
          r←_extension
        ∇
        ∇ set arg
          'Must be simple'⎕SIGNAL 11/⍨~0 1∊⍨≡arg.NewValue
          'Must be a string'⎕SIGNAL 11/⍨~IsChar arg.NewValue
          _extension←arg.NewValue
        ∇
    :EndProperty

    :Property refToUtils
    ⍝ The "Logger" class needs two scripts, "WinFile" and "APLTeamUtils". While APLTeamUtils
    ⍝ <b>must</b> be situated in the same namespace as "Logger" because it :Included,
    ⍝ Logger looks for "WinFile" at several places: it will find it automatically if _
    ⍝ it is situated either in the same namespace as "Logger" itself or in # or where _
    ⍝ Loggger got instanciated from. If this is not appropriate for you, you <b>must</b> _
    ⍝  set "refToUtils" to the namespace which keeps "WinFile".
    :Access Public Instance
        ∇ r←get
          r←_refToUtils
        ∇
        ∇ set arg
          _refToUtils←arg.NewValue
        ∇
    :EndProperty

    :Property timestamp
    ⍝ Use this for debugging purposes only: instead of using []TS, "timestamp" is _
    ⍝ used if it is not empty. Useful to test the "re-open" feature, for example.
    ⍝ "timestamp" must be a vector of integers with 6 items: y,m,d,h,m,s
    ⍝ Note that this is <b>ignored</b> if "debug" is 0!
    :Access Public Instance
        ∇ r←get
          r←_timestamp
        ∇
        ∇ set arg
          →(0∊⍴,arg.NewValue)/0
          'Invalid time stamp'⎕SIGNAL 11/⍨~(⍴,arg.NewValue)∊3 6
          'Invalid time stamp'⎕SIGNAL 11/⍨∨/~(⎕DR¨arg.NewValue)∊163 83
          _timestamp←6↑arg.NewValue
        ∇
    :EndProperty

    :Property active
    ⍝ Use this to switch logging effectively off by setting this to 0. Default is 1, of course.
    ⍝ Note this can be set as part of a command space. If it is zero, there is not even a _
    ⍝ log file opened. If later active is set to 1, the log file will be opened then.
    ⍝ If an instance is created with active←1 and it is set later set to 0, the then opened _
    ⍝ logfile will not be closed, however. In this case any operations are _
    ⍝ suppressed, but the log file will remain open.
    ⍝ See also "fileFlag".
    :Access Public Instance
        ∇ r←get
          r←_active
        ∇
        ∇ set arg
          '"active" must be a Boolean'⎕SIGNAL 11/⍨~∨/arg.NewValue∊0 1
          _active←arg.NewValue
          :If _active∧_fileFlag
          :AndIf 0=constructorIsRunning  ⍝ is set inside any constructor (locally!) to 1
          :AndIf ⍬≡_fileDescriptor ⍝ means that the log file haven't got opened so far
              _errorCounter←Create ⍬
          :EndIf
        ∇
    :EndProperty

    :Property fileFlag
    ⍝ Use this to suppress any file operations. In any other respect Logger behaves as _
    ⍝ usual, in particular the "Log" and the "LogError" methods return their explicit _
    ⍝ results. Thats the difference to "active" which switches off everything.
    ⍝ Note this can be set as part of a command space. If it is zero, there is not even a _
    ⍝ log file opened. If later fileFlag is set to 1 (and active is 1 then), the log file _
    ⍝ will be opened then.
    ⍝ If an instance is created with fileFlag←1 and it is set later set to 0, the then _
    ⍝ opened logfile will not be closed, however. In this case any file operations are _
    ⍝ suppressed, but the log file will remain open.
    ⍝ See also "active".
    :Access Public
        ∇ r←get
          r←_fileFlag
        ∇
        ∇ set arg
          '"fileFlag" must be a Boolean'⎕SIGNAL 11/⍨~∨/arg.NewValue∊0 1
          _fileFlag←arg.NewValue
          :If _fileFlag∧_active
          :AndIf 0=constructorIsRunning     ⍝ is set inside any constructor (localysed!) to 1
          :AndIf ⍬≡_fileDescriptor          ⍝ means that the log file haven't got opened so far
              _errorCounter←Create ⍬
          :EndIf
        ∇
    :EndProperty


    :Property filenamePrefix
    ⍝ Adds a prefix to the filename. For example, if the defaults for "filenameType" and "extension" are _
    ⍝ in effect, setting "filenamePrefix" to "foo" leads to:  foo_20080601.log
    ⍝ Setting this after having already created an instance is too late for this instance, of _
    ⍝ course, although it will be taken into account when the log file is reopened. To specify _
    ⍝ it in time, pass a command space to the constructor as the only parameter.
    :Access Public Instance
        ∇ r←get
          r←_filenamePrefix
        ∇
        ∇ set arg
          '"filenamePrefix" must be a string'⎕SIGNAL 11/⍨~IsChar arg.NewValue
          _filenamePrefix←arg.NewValue
        ∇
    :EndProperty

    :Property filenamePostfix
    ⍝ Adds a postfix to the filename. For example, if the defaults for "filenameType" and "extension" are _
    ⍝ in effect, setting "filenamePostfix" to "foo" leads to:  20080601_foo.log
    ⍝ Setting this after having already created an instance is too late for this instance, of _
    ⍝ course, although it will be taken into account when the log file is reopened. To specify _
    ⍝ it in time, pass a command space to the constructor as the only parameter.
    :Access Public Instance
        ∇ r←get
          r←_filenamePostfix
        ∇
        ∇ set arg
          '"filenamePostfix" must be a string'⎕SIGNAL 11/⍨~IsChar arg.NewValue
          _filenamePostfix←arg.NewValue
        ∇
    :EndProperty

    :Property errorPrefix
    ⍝ Adds a prefix to an error message to be logged by calling "LogError". Defaults to "*** ERROR "
    ⍝ Setting this after having already created an instance might be too late for this instance, _
    ⍝ although it will be taken into account from then. To specify it in time, pass a command _
    ⍝ space to the constructor as the only parameter.
    :Access Public Instance
        ∇ r←get
          r←_errorPrefix
        ∇
        ∇ set arg
          '"errorPrefix" must be a string'⎕SIGNAL 11/⍨~IsChar arg.NewValue
          _errorPrefix←arg.NewValue
        ∇
    :EndProperty

    :Property path
    ⍝ Return the log file's folder. Can only be specified when an instance is created.
    :Access Public Instance
        ∇ r←get
          r←_path
        ∇
    :EndProperty

    :Property filename
    ⍝ Return the log's current filename which is fully quailfied.
    :ACcess Public Instance
        ∇ r←get
          r←_filename
        ∇
    :EndProperty

    :Property filenameDescriptor
    ⍝ Return the log file's descriptor number.
    :ACcess Public Instance
        ∇ r←get
          r←_filenameDescriptor
        ∇
    :EndProperty

    :Property errorCounter
    ⍝ Boolean that returns the number of errors occured in an instance - ideally 0
    :ACcess Public Instance
        ∇ r←get
          r←_errorCounter
        ∇
    :EndProperty

⍝ --------------- Constructors

    ∇ make0;constructorIsRunning
    ⍝ Defaults, defaults, defaults
      :Access Public Instance
      :Implements Constructor
      constructorIsRunning←1
      InitialyzeProperties
      _errorCounter←Create ⍬
      :If _errorCounter
          'Internal method "Create" failed'⎕SIGNAL 11
      :EndIf
    ∇

    ∇ make1(y);bool;list;this;constructorIsRunning
    ⍝ y can be either a path or a command space:
    ⍝ path: Directory the log file os going to.
    ⍝ Command space: Useful to set all possible parameters. Note that you can ask
    ⍝ "Logger" to create a command space for you, see method "CreatePropertySpace". _
    ⍝ Then simply set those where the defaults do not fit your needs.
      :Access Public Instance
      :Implements Constructor
      constructorIsRunning←1
      InitialyzeProperties
      :If 9.1=⎕NC⊂,'y'
      :AndIf 0=≡y
 ⍝ It is a command space
          :If ∨/bool←2≠⎕NC⊃'_',¨list←y.⎕NL-2
              11 ⎕SIGNAL⍨'Invalid keyword(s): ',↑{⍺,',',⍵}/bool/list
          :EndIf
          'Missing: "active"'⎕SIGNAL 1/⍨~(⊂'active')∊list
          :If 9=y.⎕NC'refToUtils'
              _refToUtils←y.refToUtils  ⍝ we need this in some setters/getters
          :EndIf
          :If 0∊⍴⍕refToUtils
              'Missing: "refToUtils"'⎕SIGNAL 6
          :EndIf
          :For this :In {⍵,'←',{' '=1↑0⍴⍵:'''',⍵,'''' ⋄ ⍵≡⍬:'⍬' ⋄ ⍕⍵}y.⍎⍵}¨list~'filename' 'path' 'encoding' 'refToUtils'
              ⍎this ⍝ not eached for easier debugging
          :EndFor
          :If (⊂'filename')∊list
              _filename←y.filename
          :EndIf
          :If (⊂'path')∊list
              _path←ProcessPath y.path
          :EndIf
          :If (⊂'encoding')∊list
              :If 0∊⍴_encoding←ProcessEncoding y.encoding
                  'Invalid value: "encoding"'⎕SIGNAL 11
              :EndIf
          :EndIf
          :If 0∊⍴_filename,_filenamePostfix,_filenamePrefix,_filenameType
              'No "filenameType" specified but no "filename", "filenamePostfix", "filenamePrefix" either'⎕SIGNAL 11
          :EndIf
      :ElseIf ' '≠1↑0⍴∊y
          'Invalid parameters'⎕SIGNAL 11
      :Else
          _path←ProcessPath y
      :EndIf

      _errorCounter←Create ⍬

      :If _errorCounter
          'Internal method "Create" failed'⎕SIGNAL 11
      :EndIf
    ∇

    ∇ make2(path_ encoding_);constructorIsRunning
    ⍝ "encoding" is a flag defining the encoding. 0 (the default) is ASCII/ANSI, 1=UTF-8
      :Access Public Instance
      :Implements Constructor
      constructorIsRunning←1
      InitialyzeProperties
      :If 0∊⍴_encoding←ProcessEncoding encoding_
          'Invalid: "encoding"'⎕SIGNAL 11
      :EndIf
      _path←ProcessPath path_
      _errorCounter←Create ⍬
      'Internal method "Create" failed'⎕SIGNAL errorCounter/11
    ∇

    ∇ make3(path_ encoding_ filenameType_);constructorIsRunning
    ⍝ "filenameType_" (default: 'DATE') defines when a log files is reopened with a new name. _
    ⍝ The default means that every night at 23:59:59 a new file is opened.
    ⍝ Can be 'MONTH' or 'YEAR' instead.
      :Access Public Instance
      :Implements Constructor
      constructorIsRunning←1
      InitialyzeProperties
      _path←ProcessPath path_
      _encoding←ProcessEncoding encoding_
      filenameType←filenameType_
      _errorCounter←Create ⍬
      'Internal method "Create" failed'⎕SIGNAL errorCounter/11
    ∇

    ∇ make4(path_ encoding_ filenameType_ debug_);constructorIsRunning
    ⍝ "debug" (default: 0) is a boolean useful to switch error trapping off
      :Access Public Instance
      :Implements Constructor
      constructorIsRunning←1
      InitialyzeProperties
      _path←ProcessPath path_
      :If 0∊⍴_encoding←ProcessEncoding encoding_
          'Invalid: "encoding"'⎕SIGNAL 11
      :EndIf
      filenameType←filenameType_
      debug←debug_
      _errorCounter←Create ⍬
      'Internal method "Create" failed'⎕SIGNAL errorCounter/11
    ∇

    ∇ make5(path_ encoding_ filenameType_ debug_ timestamp_);constructorIsRunning
    ⍝ "timestamp" defaults to 6↑⎕TS. For testing purposes, for example the _
    ⍝ re-open feature of the Logging class, you can specify a particular timestamp.
      :Access Public Instance
      :Implements Constructor
      constructorIsRunning←1
      InitialyzeProperties
      _path←ProcessPath path_
      :If 0∊⍴_encoding←ProcessEncoding encoding_
          'Invalid: "encoding"'⎕SIGNAL 11
      :EndIf
      filenameType←filenameType_
      debug←debug_
      timestamp←timestamp_
      _errorCounter←Create ⍬
      'Internal method "Create" failed'⎕SIGNAL errorCounter/11
    ∇

    ∇ make6(path_ encoding_ filenameType_ debug_ timestamp_ refToUtils_);constructorIsRunning
    ⍝ refToUtils must be a ref to the namespace which contains WinnFile
      :Access Public Instance
      :Implements Constructor
      constructorIsRunning←1
      InitialyzeProperties
      _refToUtils←refToUtils_
      _path←ProcessPath path_
      :If 0∊⍴_encoding←ProcessEncoding encoding_
          'Invalid: "encoding"'⎕SIGNAL 11
      :EndIf
      filenameType←filenameType_
      debug←debug_
      timestamp←timestamp_
      _errorCounter←Create ⍬
      'Internal method "Create" failed'⎕SIGNAL errorCounter/11
    ∇

    ∇ InitialyzeProperties
    ⍝ Guess what: initialyzes the properties.
    ⍝ Called very early in the constructors but also by "CreateCommandspace
      _active←1
      _fileFlag←1
      _debug←0                  ⍝ Switch of error trapping
      _encoding←'ANSI'          ⍝ One of "ANSI", "ASCII", "UTF". Note that "ANSI" makes a difference to "ASCII" on Classic only.
      _autoReOpen←1             ⍝ re-opens log file with a new name according to the "filenameType"
      _filenameType←'DATE'      ⍝ default filenameType is "yyyymmdd" which is re-opened daily
      _printToSession←0         ⍝ If this is 1, every entry is printed to the session as well
      _refToUtils←FindPathTo'WinFile'
      _path←''                  ⍝ Directory the log file will go into; empty=current dir
      _filename←''              ⍝ the actual name
      _timestamp←⍬              ⍝ To simulate []TS; ignored when debug=0
      _extension←'log'          ⍝ File extension of the log file
      _filenamePrefix←''        ⍝ Prefix added to "filename"; use this only when "filename" is empty
      _filenamePostfix←''       ⍝ Postfix added to "filename"; use this only when "filename" is empty
      _errorPrefix←'*** ERROR'  ⍝ How to prefix error entries in the log file
      _fileDescriptor←⍬         ⍝ May indicate that "active" was 0 from the start!
    ∇

    ∇ {r}←Create dummy;rc;hint;newFilename;flag
    ⍝ Is called by the "official" constructors but is private, strictly speaking.
      r←0
      flag←9≠⎕NC(⍕_refToUtils),'.WinFile'
      :If _debug
          'Not found: script "WinFile"'⎕SIGNAL flag/6
      :ElseIf flag
          →0,r←1 ⍝ tell the outside world about the problem
      :EndIf

      r←Open ⍬
 ⍝Done
    ∇

⍝ --------------- Public Shared Methods


⍝ --------------- Public Instance Methods

    ∇ r←CreatePropertySpace
      :Access Public Shared
      ⍝ Use this to create a command space which can then be modyfied and finally _
      ⍝ passed to the constructor
      r←⎕NS''
      InitialyzeProperties
      r.active←_active
      r.encoding←_encoding
      r.autoReOpen←_autoReOpen
      r.debug←_debug
      r.errorPrefix←_errorPrefix
      r.extension←_extension
      r.fileFlag←_fileFlag
      r.filename←_filename
      r.filenamePostfix←_filenamePostfix
      r.filenamePrefix←_filenamePrefix
      r.filenameType←_filenameType
      r.path←_path
      r.printToSession←_printToSession
      r.refToUtils←_refToUtils
      r.timestamp←_timestamp
    ∇

    ∇ {r}←Log Msg;thisTimestamp;rc;newFilename;flag;buffer;tid;unicodeInterpreter;ascii
      :Access Public Instance
    ⍝ Write Msg into the Log File.
    ⍝ r gets the message written to the log file, together with the time stamp. _
    ⍝ That might be useful to write it to a GUI or the like as well.
      r←''
      :If _active
          unicodeInterpreter←80=⎕DR' '
          :Trap SetTrap 0
              thisTimestamp←Timestamp 1
              Msg←{2=⍴⍴⍵:⊂[2]⍵ ⋄ ⍵}Msg
              Msg←{0 1∊⍨≡⍵:⊂⍵ ⋄ ⍵}Msg
              :If (_encoding≡'UTF8')∧80=⎕DR' '
                  Msg←⎕UCS¨'UTF-8'∘⎕UCS¨Msg
              :Else
                  :If unicodeInterpreter
                      Msg←{~(⎕DR ⍵)∊80 82 160:⍕⍵ ⋄ 0=+/bool←128<⎕UCS w←⍵:⍵ ⋄ (bool/w)←'¿' ⋄ w}¨Msg  ⍝ replace non-ASCII chars by "¿"
                  :Else ⍝ It's a "Classic" interpreter
                      :If 'ASCII'≡_encoding
                          ascii←'1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM‘!"$%∧&*()-_=+]}[{#~''@;:/?.>,<\| ',⎕TC
                          Msg←ascii∘{0=+/bool←~(w←⍵)∊⍺:w ⋄ (bool/w)←'?' ⋄ w}¨Msg
                      :Else
                   ⍝ ANSI, so we don't touch the ⎕AV (the one Dyalog originally came with):
                          Msg←{~(⎕DR w←⍵)∊80 82 160:⍕⍵ ⋄ 0=+/bool←~(⎕UCS w)∊QavPoints:⍵ ⋄ (bool/w)←'¿' ⋄ w}¨Msg  ⍝ replace non-ANSI chars by "¿"
                      :EndIf
                  :EndIf
              :EndIf
              tid←{0=⍵:' ' ⋄ ' (',(⍕⍵),') '}⎕TID
              r←Msg←(⊂thisTimestamp,tid),¨Msg
              :If _fileFlag
                  Msg←Msg,¨⊂CrLf
                  :If 0∊⍴_fileDescriptor
                      :If _debug
                          'Log file was already closed'⎕SIGNAL 11
                      :Else
                          →0,_errorCounter+←1
                      :EndIf
                  :EndIf
                  (rc newFilename)←CheckForReopen ⍝ Check re-open condition
                  :Select rc
                  :Case ¯1
                      :If _debug
                          'Re-Open check failed'⎕SIGNAL 11
                      :Else
                          →0,_errorCounter+←1
                      :EndIf
                  :Case 1
                      buffer←thisTimestamp,' (',(⍕⎕TID),') *** Log File is going to be closed and then reopened with a new filename',CrLf
                      buffer ⎕NAPPEND _fileDescriptor Encoding
                      ⎕NUNTIE _fileDescriptor
                      _fileDescriptor←⍬
                      Open newFilename
                      thisTimestamp←Timestamp 1
                  :Case 0
                          ⍝ nothing to do, is still fine
                  :Case
                      . ⍝ must not happen!
                  :EndSelect
                  flag←0
                  :Trap 0
                      (∊Msg)⎕NAPPEND _fileDescriptor Encoding
                  :Else
                      _errorCounter+←1
                      flag←1
                      :Trap 0
                          ((Timestamp 1),' (',(⍕⎕TID),')')∘{(⍺,' ',∊⍵,CrLf)⎕NAPPEND _fileDescriptor Encoding}¨buffer←(⊂'Invalid msg passed via:'),1↓(⎕LC{⍵,' [',(⍕⍺),']'}¨⎕XSI)
                      :EndTrap
                  :EndTrap
                  :If _printToSession
                      :If flag
                          ⎕←⊃PolishMsg buffer
                      :Else
                          ⎕←⊃PolishMsg ¯2↓¨Msg
                      :EndIf
                  :EndIf
              :Else
                  ⎕←⊃PolishMsg Msg
              :EndIf
          :Else
              _errorCounter+←1
          :EndTrap
      :EndIf
    ∇

    ∇ {r}←LogError(rc more msg);txt
      :Access Public Instance
     ⍝ Useful to log an error. This is a cover function of "Log".
     ⍝ In case rc ←→ 0, LogError is doing nothing at all. _
     ⍝ Otherwise, it writes "msg" into the log file _
     ⍝ and marks it up as an error.
     ⍝ If all is fine, r gets '', otherwise it returns the message written
      r←''
      :If _active
      :AndIf 0≠rc
          txt←_errorPrefix,' RC=',⍕rc
          :If ~0∊⍴,more
              txt,←'; ',,⎕FMT more
          :EndIf
          msg←' ',¨{0 1∊⍨≡⍵:⊂⍵ ⋄ ⍵}{2=⍴⍴⍵:↓⍵ ⋄ ⍵}msg
          r←Log(⊂txt),msg
      :EndIf
    ∇

⍝ --------------- Private stuff
    ∇ (rc more filename)←MakeNewFilename filename
    ⍝ Compiles a new filename and takes any changes in the timestamp into account.
    ⍝ As a result, the compiled filename might differ from the one used so far.
    ⍝ In that case, obviously the log file needs to be re-opened when autoReOpen←→1
      rc←0 ⋄ more←''
      :Trap SetTrap 0
          :If (_autoReOpen)∨(0∊⍴filename)
              filename←(8↑Timestamp 0)↑⍨('DATE' 'MONTH' 'YEAR'⍳⊂_filenameType)⊃8 6 4 0
              filename←_filenamePostfix{0∊⍴⍺:⍵ ⋄ ⍵,'_',⍺}filename
              filename←_filenamePrefix{0∊⍴⍺:⍵ ⋄ ⍺,'_',⍵}filename
          :EndIf
      :Else
          :If _debug
              . ⍝ something is wrong here
          :Else
              rc←1
              more←⎕DM
          :EndIf
      :EndTrap
    ∇

    ∇ r←SetTrap events;Flag
 ⍝ R gets 1 if error trapping is appropriate according to the _
 ⍝ global _debug variable
      :Trap 0
          r←(~_debug)/events
      :Else
          r←events
      :EndTrap
    ∇

    ∇ r←Timestamp decoratorFlag;ts
⍝ 1=decoratorFlag ←→ yyyy-mm-dd hh:mm:ss
⍝ 0=decoratorFlag ←→ yyyymmddhhmmss
      :If ~0∊⍴_timestamp
      :AndIf _debug
          ts←6↑_timestamp
      :Else
          ts←6↑⎕TS
      :EndIf
      :If decoratorFlag
          r←,'ZI4,<->,ZI2,<->,ZI2,< >,ZI2,<:>,ZI2,<:>,ZI2'⎕FMT,[0.5]ts
      :ElseIf 0=decoratorFlag
          r←,'ZI4,ZI2,ZI2,ZI2,ZI2,ZI2'⎕FMT,[0.5]3↑ts
      :Else
          'Invalid right argument'⎕SIGNAL 11
      :EndIf
    ∇

    ∇ {r}←Open newFilename;rc;hint;⎕RL;fno
    ⍝ Open the log file. Any directory requested but non-existent is created here as well.
      r←0
      :If _active∧_fileFlag
          :Trap SetTrap 0
              _filenameType←Uppercase _filenameType
              :If 0∊⍴newFilename
                  (rc hint newFilename)←MakeNewFilename''
                  :If 0≠rc
                      :If _debug
                          'Could not create new filename from "filenameType" and "path"'⎕SIGNAL 11
                      :Else
                          →0,r←1
                      :EndIf
                  :EndIf
              :EndIf
              :If '.'≠↑¯4↑newFilename
                  newFilename,←'.',_extension
              :EndIf
              _filename←newFilename
              :If ~0∊⍴_path
                  :If ~'CREATE!'_refToUtils.WinFile.CheckPath _path
                      :If _debug
                          'Could not open the log file, check the path'⎕SIGNAL 11
                      :Else
                          →0,r←1
                      :EndIf
                  :EndIf
              :EndIf
              ⎕RL←+/⎕TS
              fno←-?99999999 ⍝ that makes it very unlikely to get us into trouble when any destructor unties this file
              :Trap 0
                  _fileDescriptor←FullFilename ⎕NCREATE fno
              :Case 22
                  :Trap SetTrap 0
                      _fileDescriptor←FullFilename ⎕NTIE fno 66 ⍝ grant all to all!
                  :Else
                      :If _debug
                          ⎕EN ⎕SIGNAL⍨'Error during open of logfiles: ',1⊃⎕DM
                      :Else
                          →0,r←1
                      :EndIf
                  :EndTrap
              :Else
                  ⎕SIGNAL 11
              :EndTrap
              ((Timestamp 1),' ','*** Log File opened',CrLf)⎕NAPPEND _fileDescriptor Encoding
          :Else
              r←1
              :If _debug
                  'Error during open of logfiles'⎕SIGNAL ⎕EN
              :EndIf
          :EndTrap
      :EndIf
    ∇

    ∇ (r newFilename)←CheckForReopen;rc;hint;string
     ⍝ r←0   if there is no need to re-open the log file
     ⍝ r←1   if the log file needs to be re-opened
     ⍝ r←¯1  in case of an error
      newFilename←''
      :If r←~0∊⍴,_autoReOpen
          (rc hint newFilename)←MakeNewFilename _filename
          :If 0≠rc
              :If _debug
                  hint ⎕SIGNAL rc
              :Else
                  →0,r←¯1
              :EndIf
          :EndIf
          :If (0∊⍴,newFilename)∨~_autoReOpen
              r←0
          :Else
              string←(⍴_filenamePrefix)↓_filename
              :Select _filenameType
              :Case 'DATE'
                  r←string[7 8]≢((⍴_filenamePrefix)↓newFilename)[7 8]
              :Case 'MONTH'
                  r←string[5 6]≢((⍴_filenamePrefix)↓newFilename)[5 6]
              :Case 'YEAR'
                  r←string[1 2 3 4]≢((⍴_filenamePrefix)↓newFilename)[1 2 3 4]
              :Case ''
                  r←newFilename≢1⊃'.'Split _filename
              :EndSelect
          :EndIf
      :EndIf
    ∇

    ∇ Close;This
      :Access Public
    ⍝ Closes the log file
      :Trap 0
          Log'*** Log file closed'
      :EndTrap
      Close2
    ∇

    ∇ r←FullFilename
      :Access Public Instance
    ⍝ Returns the fully qualified file name of the log file: path+filename
      r←_path,_filename
    ∇

⍝ --------------- Private stuff

    ∇ r←Encoding
      r←{82=⎕DR' ':82
          ('ASCII' 'UTF8'⍳⊂⍵)⊃82 80 82}_encoding
    ∇

    ∇ r←QavPoints
    ⍝ Returns the Unicode points of all chars in the standard ⎕AV:  ⎕UCS ⎕AV
    ⍝ Used to tell in the classic version "real" Unicode chars from any chars in ⎕AV
      r←
    ∇

      ProcessPath←{
          0∊⍴⍵:''
          ⍵,(~'\/'∊⍨¯1↑⍵)/'/'  ⍝ append / if appropriate
      }

      ProcessEncoding←{
          0=1↑0⍴∊⍵:'ASCII'
          w←Uppercase ⍵
          (⊂w)∊'ASCII' 'UTF8' 'ANSI':w
          '' ⍝ invalid!
      }

      PolishMsg←{
      ⍝ Called before a message is printed to the session.
      ⍝ Makes sure that ⎕PW is taken into account
      ⍝ ⍵ is a vector of strings
          max←⎕PW-3
          ∧/~bool←max<↑∘⍴¨r←⍵:r
          (bool/r)←max{'..',⍨⍺↑⍵}¨bool/r
          r
      }


⍝ --------------- Destructor

    ∇ Cleanup;List
      :Implements Destructor
      Close2
    ∇

    ∇ Close2
 ⍝ Because we do not know when the destructor (which calls "Close2"!)
 ⍝ will get executed, it might very well be the case that the file is
 ⍝ already closed, and the file number got reused. We cannot really
 ⍝ prevent this from happening, but at least we can check if the file
 ⍝ number is still associated with the same name - if not we don't
 ⍝ do anything, of course.
      :If 0<⎕NC'_fileDescriptor'
      :AndIf ⍬≢_fileDescriptor
      :AndIf _fileDescriptor∊⎕NNUMS
      :AndIf (_path,_filename)≡⎕NNAMES[⎕NNUMS⍳_fileDescriptor;]
          ⎕NUNTIE _fileDescriptor
          _fileDescriptor←⍬
          _filename←''
      :EndIf
    ∇

:EndClass
